/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp com.coderfrog.qcompanion.xml -a dbusadaptor
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "dbusadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class QcompanionAdaptor
 */

QcompanionAdaptor::QcompanionAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
  // constructor
  setAutoRelaySignals(true);
}

QcompanionAdaptor::~QcompanionAdaptor()
{
  // destructor
}

void QcompanionAdaptor::displayMessage(const QString &message)
{
  // handle method call com.coderfrog.qcompanion.displayMessage
  QMetaObject::invokeMethod(parent(), "displayMessage",
                            Q_ARG(QString, message));
}

void QcompanionAdaptor::quit()
{
  // handle method call com.coderfrog.qcompanion.quit
  QMetaObject::invokeMethod(parent(), "quit");
}

void QcompanionAdaptor::sendToSpeaker(const QString &sayMe)
{
  // handle method call com.coderfrog.qcompanion.sendToSpeaker
  QMetaObject::invokeMethod(parent(), "sendToSpeaker", Q_ARG(QString, sayMe));
}

void QcompanionAdaptor::speakClipboard()
{
  // handle method call com.coderfrog.qcompanion.speakClipboard
  QMetaObject::invokeMethod(parent(), "speakClipboard");
}

void QcompanionAdaptor::toggleNotifications()
{
  // handle method call com.coderfrog.qcompanion.toggleNotifications
  QMetaObject::invokeMethod(parent(), "toggleNotifications");
}

void QcompanionAdaptor::toggleTTS()
{
  // handle method call com.coderfrog.qcompanion.toggleTTS
  QMetaObject::invokeMethod(parent(), "toggleTTS");
}

/*
 * Implementation of adaptor class HourreaderAdaptor
 */

HourreaderAdaptor::HourreaderAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
  // constructor
  setAutoRelaySignals(true);
}

HourreaderAdaptor::~HourreaderAdaptor()
{
  // destructor
}

QString HourreaderAdaptor::getText()
{
  // handle method call com.coderfrog.qcompanion.hourreader.getText
  QString out0;
  QMetaObject::invokeMethod(parent(), "getText", Q_RETURN_ARG(QString, out0));
  return out0;
}

/*
 * Implementation of adaptor class QlipperAdaptor
 */

QlipperAdaptor::QlipperAdaptor(QObject *parent) : QDBusAbstractAdaptor(parent)
{
  // constructor
  setAutoRelaySignals(true);
}

QlipperAdaptor::~QlipperAdaptor()
{
  // destructor
}

void QlipperAdaptor::setFileLocation()
{
  // handle method call com.coderfrog.qcompanion.qlipper.setFileLocation
  QMetaObject::invokeMethod(parent(), "setFileLocation");
}

void QlipperAdaptor::setLogEnabled(bool enabled)
{
  // handle method call com.coderfrog.qcompanion.qlipper.setLogEnabled
  QMetaObject::invokeMethod(parent(), "setLogEnabled", Q_ARG(bool, enabled));
}

void QlipperAdaptor::setMuteSettings(bool shouldMute)
{
  // handle method call com.coderfrog.qcompanion.qlipper.setMuteSettings
  QMetaObject::invokeMethod(parent(), "setMuteSettings",
                            Q_ARG(bool, shouldMute));
}

void QlipperAdaptor::showDialog()
{
  // handle method call com.coderfrog.qcompanion.qlipper.showDialog
  QMetaObject::invokeMethod(parent(), "showDialog");
}

/*
 * Implementation of adaptor class QsnapperAdaptor
 */

QsnapperAdaptor::QsnapperAdaptor(QObject *parent) : QDBusAbstractAdaptor(parent)
{
  // constructor
  setAutoRelaySignals(true);
}

QsnapperAdaptor::~QsnapperAdaptor()
{
  // destructor
}

void QsnapperAdaptor::enableSnapping(bool enable)
{
  // handle method call com.coderfrog.qcompanion.qsnapper.enableSnapping
  QMetaObject::invokeMethod(parent(), "enableSnapping", Q_ARG(bool, enable));
}

void QsnapperAdaptor::setDiff(bool enable)
{
  // handle method call com.coderfrog.qcompanion.qsnapper.setDiff
  QMetaObject::invokeMethod(parent(), "setDiff", Q_ARG(bool, enable));
}

void QsnapperAdaptor::setLenient(bool isLenient)
{
  // handle method call com.coderfrog.qcompanion.qsnapper.setLenient
  QMetaObject::invokeMethod(parent(), "setLenient", Q_ARG(bool, isLenient));
}

void QsnapperAdaptor::setMuteSettings(bool shouldMute)
{
  // handle method call com.coderfrog.qcompanion.qsnapper.setMuteSettings
  QMetaObject::invokeMethod(parent(), "setMuteSettings",
                            Q_ARG(bool, shouldMute));
}

bool QsnapperAdaptor::snap()
{
  // handle method call com.coderfrog.qcompanion.qsnapper.snap
  bool out0;
  QMetaObject::invokeMethod(parent(), "snap", Q_RETURN_ARG(bool, out0));
  return out0;
}

/*
 * Implementation of adaptor class SpeakerAdaptor
 */

SpeakerAdaptor::SpeakerAdaptor(QObject *parent) : QDBusAbstractAdaptor(parent)
{
  // constructor
  setAutoRelaySignals(true);
}

SpeakerAdaptor::~SpeakerAdaptor()
{
  // destructor
}

bool SpeakerAdaptor::isNotificationsEnabled()
{
  // handle method call com.coderfrog.qcompanion.speaker.isNotificationsEnabled
  bool out0;
  QMetaObject::invokeMethod(parent(), "isNotificationsEnabled",
                            Q_RETURN_ARG(bool, out0));
  return out0;
}

bool SpeakerAdaptor::isTTSEnabled()
{
  // handle method call com.coderfrog.qcompanion.speaker.isTTSEnabled
  bool out0;
  QMetaObject::invokeMethod(parent(), "isTTSEnabled", Q_RETURN_ARG(bool, out0));
  return out0;
}

void SpeakerAdaptor::setNotificationsEnabled(bool enable)
{
  // handle method call com.coderfrog.qcompanion.speaker.setNotificationsEnabled
  QMetaObject::invokeMethod(parent(), "setNotificationsEnabled",
                            Q_ARG(bool, enable));
}

void SpeakerAdaptor::setTTSEnabled(bool enable)
{
  // handle method call com.coderfrog.qcompanion.speaker.setTTSEnabled
  QMetaObject::invokeMethod(parent(), "setTTSEnabled", Q_ARG(bool, enable));
}

void SpeakerAdaptor::speak(const QString &speakMe)
{
  // handle method call com.coderfrog.qcompanion.speaker.speak
  QMetaObject::invokeMethod(parent(), "speak", Q_ARG(QString, speakMe));
}

/*
 * Implementation of adaptor class WaiterAdaptor
 */

WaiterAdaptor::WaiterAdaptor(QObject *parent) : QDBusAbstractAdaptor(parent)
{
  // constructor
  setAutoRelaySignals(true);
}

WaiterAdaptor::~WaiterAdaptor()
{
  // destructor
}

void WaiterAdaptor::selectStatePath()
{
  // handle method call com.coderfrog.waiter.selectStatePath
  QMetaObject::invokeMethod(parent(), "selectStatePath");
}
